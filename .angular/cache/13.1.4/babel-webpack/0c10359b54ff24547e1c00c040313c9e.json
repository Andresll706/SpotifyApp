{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\david\\\\MASTER\\\\DESARROLLO DE INTERFACES RICOS PARA INTERNET\\\\PRACTICAS\\\\SpotiApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport class SpotiService {\n  constructor() {// This is intentional\n  } // Get Token\n\n\n  getToken() {\n    return new Promise(function (resolve, reject) {\n      // do the usual XHR stuff\n      var req = new XMLHttpRequest();\n      req.open('post', \"http://accounts.spotify.com/api/token\", false); //NOW WE TELL THE SERVER WHAT FORMAT OF POST REQUEST WE ARE MAKING\n\n      req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\n      req.onload = function () {\n        if (req.status == 200) {\n          if (typeof req.response === 'string') {\n            resolve(req.response);\n          }\n        } else {\n          reject(Error(\"Network Error\"));\n        }\n      };\n\n      req.onreadystatechange = function () {\n        if (req.readyState === 4) {\n          if (req.status === 200) {\n            console.log(req.responseText);\n          } else {\n            console.log(\"Error : \" + req.status + \" , \" + req.statusText);\n          }\n        }\n      }; // handle network errors\n\n\n      req.onerror = function () {\n        reject(Error(\"Error : \" + req.status + \" , \" + req.statusText));\n      }; // make the request\n\n\n      req.send(\"grant_type=client_credentials&client_id=d491c56768584819a96395b8c4b126fb&client_secret=edffe31e694344448c4a6faa14934e7b\");\n    });\n  }\n\n  getArtists(name) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let access_token = '';\n      let promiseToken = yield _this.getToken().catch(reason => {\n        console.log(\"Error :\" + reason);\n      });\n\n      if (typeof promiseToken === 'string') {\n        let token = JSON.parse(promiseToken);\n        access_token = token.access_token;\n      }\n\n      if (access_token != '') {\n        return new Promise(function (resolve, reject) {\n          // do the usual XHR stuff\n          var req = new XMLHttpRequest();\n          req.open('get', \"https://api.spotify.com/v1/search?q=\" + name + \"&type=artist&limit=15\"); //NOW WE TELL THE SERVER WHAT FORMAT OF POST REQUEST WE ARE MAKING\n\n          req.setRequestHeader('Accept', 'application/json');\n          req.setRequestHeader('Content-Type', 'application/json');\n          req.setRequestHeader('Authorization', 'Bearer ' + access_token);\n\n          req.onload = function () {\n            if (req.status == 200) {\n              resolve(req.response);\n            } else {\n              console.log(\"Error : \" + req.status + \" , \" + req.statusText);\n            }\n          }; // handle network errors\n\n\n          req.onerror = function () {\n            reject(Error(\"Error : \" + req.status + \" , \" + req.statusText));\n          }; // make the request\n\n\n          req.send();\n        });\n      } else {\n        throw new Error();\n      }\n    })();\n  }\n\n  getNewReleases() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let access_token = '';\n      let promiseToken = yield _this2.getToken().catch(reason => {\n        console.log(\"Error: \" + reason);\n      });\n\n      if (typeof promiseToken === 'string') {\n        let token = JSON.parse(promiseToken);\n        access_token = token.access_token;\n      }\n\n      if (access_token != '') {\n        return new Promise(function (resolve, reject) {\n          // do the usual XHR stuff\n          var req = new XMLHttpRequest();\n          req.open('get', \"https://api.spotify.com/v1/browse/new-releases?limit=15\", false); //NOW WE TELL THE SERVER WHAT FORMAT OF POST REQUEST WE ARE MAKING\n\n          req.setRequestHeader('Accept', 'application/json');\n          req.setRequestHeader('Content-Type', 'application/json');\n          req.setRequestHeader('Authorization', 'Bearer ' + access_token);\n\n          req.onload = function () {\n            if (req.status == 200) {\n              resolve(req.response);\n            } else {\n              console.log(req.statusText);\n            }\n          }; // handle network errors\n\n\n          req.onerror = function () {\n            reject(Error(\"Error : \" + req.status + \" , \" + req.statusText));\n          }; // make the request\n\n\n          req.send();\n        });\n      } else {\n        throw new Error();\n      }\n    })();\n  }\n\n  getArtistById(id) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let access_token = '';\n      let promiseToken = yield _this3.getToken().catch(reason => {\n        console.log(\"Error: \" + reason);\n      });\n\n      if (typeof promiseToken === 'string') {\n        let token = JSON.parse(promiseToken);\n        access_token = token.access_token;\n      }\n\n      if (access_token != '') {\n        return new Promise(function (resolve, reject) {\n          // do the usual XHR stuff\n          var req = new XMLHttpRequest();\n          req.open('get', 'https://api.spotify.com/v1/artists/' + id, false); //NOW WE TELL THE SERVER WHAT FORMAT OF POST REQUEST WE ARE MAKING\n\n          req.setRequestHeader('Accept', 'application/json');\n          req.setRequestHeader('Content-Type', 'application/json');\n          req.setRequestHeader('Authorization', 'Bearer ' + access_token);\n\n          req.onload = function () {\n            if (req.status == 200) {\n              resolve(req.response);\n            } else {\n              reject(Error(\"Error : \" + req.status + \" , \" + req.statusText));\n            }\n          }; // handle network errors\n\n\n          req.onerror = function () {\n            reject(Error(\"Error : \" + req.status + \" , \" + req.statusText));\n          }; // make the request\n\n\n          req.send();\n        });\n      } else {\n        throw new Error();\n      }\n    })();\n  }\n\n  getArtistTracksWithId(id) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      let access_token = '';\n      let promiseToken = yield _this4.getToken().catch(reason => {\n        console.log(\"Error: \" + reason);\n      });\n\n      if (typeof promiseToken === 'string') {\n        let token = JSON.parse(promiseToken);\n        access_token = token.access_token;\n      }\n\n      if (access_token != '') {\n        return new Promise(function (resolve, reject) {\n          // do the usual XHR stuff\n          var req = new XMLHttpRequest();\n          req.open('get', 'https://api.spotify.com/v1/artists/' + id + '/top-tracks?market=ES', false); //NOW WE TELL THE SERVER WHAT FORMAT OF POST REQUEST WE ARE MAKING\n\n          req.setRequestHeader('Accept', 'application/json');\n          req.setRequestHeader('Content-Type', 'application/json');\n          req.setRequestHeader('Authorization', 'Bearer ' + access_token);\n\n          req.onload = function () {\n            if (req.status == 200) {\n              resolve(req.response);\n            } else {\n              reject(Error(\"Error : \" + req.status + \" , \" + req.statusText));\n            }\n          }; // handle network errors\n\n\n          req.onerror = function () {\n            reject(Error(\"Error : \" + req.status + \" , \" + req.statusText));\n          }; // make the request\n\n\n          req.send();\n        });\n      } else {\n        throw new Error();\n      }\n    })();\n  }\n\n}\n\nSpotiService.ɵfac = function SpotiService_Factory(t) {\n  return new (t || SpotiService)();\n};\n\nSpotiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SpotiService,\n  factory: SpotiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/david/MASTER/DESARROLLO DE INTERFACES RICOS PARA INTERNET/PRACTICAS/SpotiApp/src/app/services/spoti.service.ts"],"names":["i0","SpotiService","constructor","getToken","Promise","resolve","reject","req","XMLHttpRequest","open","setRequestHeader","onload","status","response","Error","onreadystatechange","readyState","console","log","responseText","statusText","onerror","send","getArtists","name","access_token","promiseToken","catch","reason","token","JSON","parse","getNewReleases","getArtistById","id","getArtistTracksWithId","ɵfac","SpotiService_Factory","t","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import * as i0 from \"@angular/core\";\r\nexport class SpotiService {\r\n    constructor() {\r\n        // This is intentional\r\n    }\r\n    // Get Token\r\n    getToken() {\r\n        return new Promise(function (resolve, reject) {\r\n            // do the usual XHR stuff\r\n            var req = new XMLHttpRequest();\r\n            req.open('post', \"http://accounts.spotify.com/api/token\", false);\r\n            //NOW WE TELL THE SERVER WHAT FORMAT OF POST REQUEST WE ARE MAKING\r\n            req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n            req.onload = function () {\r\n                if (req.status == 200) {\r\n                    if (typeof req.response === 'string') {\r\n                        resolve(req.response);\r\n                    }\r\n                }\r\n                else {\r\n                    reject(Error(\"Network Error\"));\r\n                }\r\n            };\r\n            req.onreadystatechange = function () {\r\n                if (req.readyState === 4) {\r\n                    if (req.status === 200) {\r\n                        console.log(req.responseText);\r\n                    }\r\n                    else {\r\n                        console.log(\"Error : \" + req.status + \" , \" + req.statusText);\r\n                    }\r\n                }\r\n            };\r\n            // handle network errors\r\n            req.onerror = function () {\r\n                reject(Error(\"Error : \" + req.status + \" , \" + req.statusText));\r\n            };\r\n            // make the request\r\n            req.send(\"grant_type=client_credentials&client_id=d491c56768584819a96395b8c4b126fb&client_secret=edffe31e694344448c4a6faa14934e7b\");\r\n        });\r\n    }\r\n    async getArtists(name) {\r\n        let access_token = '';\r\n        let promiseToken = await this.getToken().catch((reason) => { console.log(\"Error :\" + reason); });\r\n        if (typeof promiseToken === 'string') {\r\n            let token = JSON.parse(promiseToken);\r\n            access_token = token.access_token;\r\n        }\r\n        if (access_token != '') {\r\n            return new Promise(function (resolve, reject) {\r\n                // do the usual XHR stuff\r\n                var req = new XMLHttpRequest();\r\n                req.open('get', \"https://api.spotify.com/v1/search?q=\" + name + \"&type=artist&limit=15\");\r\n                //NOW WE TELL THE SERVER WHAT FORMAT OF POST REQUEST WE ARE MAKING\r\n                req.setRequestHeader('Accept', 'application/json');\r\n                req.setRequestHeader('Content-Type', 'application/json');\r\n                req.setRequestHeader('Authorization', 'Bearer ' + access_token);\r\n                req.onload = function () {\r\n                    if (req.status == 200) {\r\n                        resolve(req.response);\r\n                    }\r\n                    else {\r\n                        console.log(\"Error : \" + req.status + \" , \" + req.statusText);\r\n                    }\r\n                };\r\n                // handle network errors\r\n                req.onerror = function () {\r\n                    reject(Error(\"Error : \" + req.status + \" , \" + req.statusText));\r\n                }; // make the request\r\n                req.send();\r\n            });\r\n        }\r\n        else {\r\n            throw new Error();\r\n        }\r\n    }\r\n    async getNewReleases() {\r\n        let access_token = '';\r\n        let promiseToken = await this.getToken().catch((reason) => { console.log(\"Error: \" + reason); });\r\n        if (typeof promiseToken === 'string') {\r\n            let token = JSON.parse(promiseToken);\r\n            access_token = token.access_token;\r\n        }\r\n        if (access_token != '') {\r\n            return new Promise(function (resolve, reject) {\r\n                // do the usual XHR stuff\r\n                var req = new XMLHttpRequest();\r\n                req.open('get', \"https://api.spotify.com/v1/browse/new-releases?limit=15\", false);\r\n                //NOW WE TELL THE SERVER WHAT FORMAT OF POST REQUEST WE ARE MAKING\r\n                req.setRequestHeader('Accept', 'application/json');\r\n                req.setRequestHeader('Content-Type', 'application/json');\r\n                req.setRequestHeader('Authorization', 'Bearer ' + access_token);\r\n                req.onload = function () {\r\n                    if (req.status == 200) {\r\n                        resolve(req.response);\r\n                    }\r\n                    else {\r\n                        console.log(req.statusText);\r\n                    }\r\n                };\r\n                // handle network errors\r\n                req.onerror = function () {\r\n                    reject(Error(\"Error : \" + req.status + \" , \" + req.statusText));\r\n                };\r\n                // make the request\r\n                req.send();\r\n            });\r\n        }\r\n        else {\r\n            throw new Error();\r\n        }\r\n    }\r\n    async getArtistById(id) {\r\n        let access_token = '';\r\n        let promiseToken = await this.getToken().catch((reason) => { console.log(\"Error: \" + reason); });\r\n        if (typeof promiseToken === 'string') {\r\n            let token = JSON.parse(promiseToken);\r\n            access_token = token.access_token;\r\n        }\r\n        if (access_token != '') {\r\n            return new Promise(function (resolve, reject) {\r\n                // do the usual XHR stuff\r\n                var req = new XMLHttpRequest();\r\n                req.open('get', 'https://api.spotify.com/v1/artists/' + id, false);\r\n                //NOW WE TELL THE SERVER WHAT FORMAT OF POST REQUEST WE ARE MAKING\r\n                req.setRequestHeader('Accept', 'application/json');\r\n                req.setRequestHeader('Content-Type', 'application/json');\r\n                req.setRequestHeader('Authorization', 'Bearer ' + access_token);\r\n                req.onload = function () {\r\n                    if (req.status == 200) {\r\n                        resolve(req.response);\r\n                    }\r\n                    else {\r\n                        reject(Error(\"Error : \" + req.status + \" , \" + req.statusText));\r\n                    }\r\n                };\r\n                // handle network errors\r\n                req.onerror = function () {\r\n                    reject(Error(\"Error : \" + req.status + \" , \" + req.statusText));\r\n                };\r\n                // make the request\r\n                req.send();\r\n            });\r\n        }\r\n        else {\r\n            throw new Error();\r\n        }\r\n    }\r\n    async getArtistTracksWithId(id) {\r\n        let access_token = '';\r\n        let promiseToken = await this.getToken().catch((reason) => { console.log(\"Error: \" + reason); });\r\n        if (typeof promiseToken === 'string') {\r\n            let token = JSON.parse(promiseToken);\r\n            access_token = token.access_token;\r\n        }\r\n        if (access_token != '') {\r\n            return new Promise(function (resolve, reject) {\r\n                // do the usual XHR stuff\r\n                var req = new XMLHttpRequest();\r\n                req.open('get', 'https://api.spotify.com/v1/artists/' + id + '/top-tracks?market=ES', false);\r\n                //NOW WE TELL THE SERVER WHAT FORMAT OF POST REQUEST WE ARE MAKING\r\n                req.setRequestHeader('Accept', 'application/json');\r\n                req.setRequestHeader('Content-Type', 'application/json');\r\n                req.setRequestHeader('Authorization', 'Bearer ' + access_token);\r\n                req.onload = function () {\r\n                    if (req.status == 200) {\r\n                        resolve(req.response);\r\n                    }\r\n                    else {\r\n                        reject(Error(\"Error : \" + req.status + \" , \" + req.statusText));\r\n                    }\r\n                };\r\n                // handle network errors\r\n                req.onerror = function () {\r\n                    reject(Error(\"Error : \" + req.status + \" , \" + req.statusText));\r\n                }; // make the request\r\n                req.send();\r\n            });\r\n        }\r\n        else {\r\n            throw new Error();\r\n        }\r\n    }\r\n}\r\nSpotiService.ɵfac = function SpotiService_Factory(t) { return new (t || SpotiService)(); };\r\nSpotiService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SpotiService, factory: SpotiService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}